// void    *simulation_philo(void *arg)
// {
//     t_philo *philo;

//     philo = (t_philo *)arg;
//     return (NULL);
// }

// static void lifesycle(t_data *data , t_philo *philo)
// {
//     int i;

//     if (data->meals == 0)
//         return ;
//     else if (data->philosophers == 1)
//         printf("we do later in code");
//     else
//     {
//         i = -1;
//         while (i < data->philosophers)
//             ft_thread(&philo[i].num_id, simulation_philo, &philo[i], CREATE);
//     }
// }

// static void  int_philosophers(t_data *data ,t_philo * philo, t_fork *forks, int id)
// {
//         philo->is_dead = false;
//         philo->id = id;
//         philo->meals_counter = 0;
//         philo->fork_right = &forks[id];
//         philo->fork_left = &forks[(id + 1) % data->philosophers];
//         if (id % 2 == 0)
//         {
//             philo->fork_left = &forks[id];
//             philo->fork_right = &forks[(id + 1) % (id + 1)];
//         }
//         philo->data = data;
// }
// static bool init(t_data *data)
// {
//     int i;

//     data->fork = ft_malloc((sizeof(t_fork) * data->philosophers), data);
//     if (data->malloc_failure == true)
//         return (ft_putstr_fd(MALLOC_FAILURE, 2), true);
//     data->philo = ft_malloc((sizeof(t_philo) * data->philosophers), data);
//     if (data->malloc_failure == true)
//         return (ft_putstr_fd(MALLOC_FAILURE, 2), true);
//     i = 0;
//     while (i < data->philosophers)
//     {
//         ft_mutex(&data->fork[i].fork, INIT);
//         data->fork[i].fork_id = i;
//         i++;
//     }
//     i = -1;
//     while (++i < data->philosophers)
//         int_philosophers(data, &data->philo[i], data->fork, i);
//     return false;

//     philo->nbr_philo = to_int(av[1]);
//     philo->time_to_dead = to_int(av[2]);
//     philo->time_to_eat = to_int(av[3]);
//     philo->time_to_sleep = to_int(av[4]);
//     if (philo->philosophers == 0)
//         return (ft_putstr_fd("Error [you can not run with 0 philosopher]\n", 2), true);
//     else if (philo->philosophers > 200)
//         return (ft_putstr_fd("Do not test with more than 200 philosophers\n",2),true);
//     else if (philo->time_to_dead < MILSECOND || philo->time_to_eat < MILSECOND
//         || philo->time_to_sleep < MILSECOND )
//         return (ft_putstr_fd("Do not test values lower than 60 ms \n",2), true);
//     if (ac == 6)
//         philo->meals = to_int(av[5]);
//     else
//         philo->meals = -1337;
//     philo->time.dead = philo->time_to_dead * MICROSECONDS;
// 	philo->time.eat = philo->time_to_eat * MICROSECONDS;
// 	philo->time.sleep = philo->time_to_sleep * MICROSECONDS;
//     philo->malloc_failure = false;
//     philo->all_thread_run = false;
//     philo->conter = 0;
//     philo->is_out = false;
//     return (false);
// }